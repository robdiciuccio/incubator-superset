name: Ephemeral env spinup

on:
  issue_comment:
    types: [created]

jobs:
  ephemeral_env_comment:
    if: ${{ github.event.issue.pull_request }}
    name: Evaluate ephemeral env comment trigger (/testenv)
    runs-on: ubuntu-latest

    steps:
    - name: Debug
      run: |
        echo "Comment on PR #${{ github.event.issue.number }} by ${{ github.event.issue.user.login }}, ${{ github.event.comment.author_association }}"
        echo "Comment body: ${{ github.event.comment.body }}"

    - name: Eval comment body
      uses: actions/github-script@v3
      id: eval-body
      with:
        result-encoding: string
        script: |
          const pattern = /^\/testenv/
          return String(pattern.test(context.payload.comment.body))

    - name: Exit on non-matching comment body
      if: steps.eval-body.outputs.result == 'false'
      run: exit 1

    # https://docs.github.com/en/graphql/reference/enums#commentauthorassociation
    - name: Limit to committers
      if: github.event.comment.author_association != 'MEMBER' && github.event.comment.author_association != 'OWNER'
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const errMsg = 'Ephemeral environment creation is currently limited to committers.'
          github.issues.createComment({
            issue_number: ${{ github.event.issue.number }},
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: errMsg
          })
          core.setFailed(errMsg)

  ephemeral_env_creation:
    needs: ephemeral_env_comment
    name: Spin up an ephemeral environment
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        persist-credentials: false

    - uses: actions/github-script@v3
      id: get-pr
      with:
        script: |
          const request = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          }
          core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
          try {
            const result = await github.pulls.get(request)
            return result.data
          } catch (err) {
            core.setFailed(`Request failed with error ${err}`)
          }

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # TODO: merge commit sha is going to change whenever master is updated?

    - name: Check target image exists in ECR
      id: check-image
      continue-on-error: true
      run: |
        aws ecr describe-images \
        --registry-id $(echo "${{ steps.login-ecr.outputs.registry }}" | grep -Eo "^[0-9]+") \
        --repository-name superset-ci \
        --image-ids imageTag=${{ fromJSON(steps.get-pr.outputs.result).merge_commit_sha }}

    - name: Fail on missing container image
      if: steps.check-image.outcome == 'failure'
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const errMsg = 'Container image not yet published for this commit. Please try again when build is complete.'
          github.issues.createComment({
            issue_number: ${{ github.event.issue.number }},
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: errMsg
          })
          core.setFailed(errMsg)

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: .github/workflows/ecs-task-definition.json
        container-name: superset-ci
        image: ${{ steps.login-ecr.outputs.registry }}/superset-ci:${{ fromJSON(steps.get-pr.outputs.result).merge_commit_sha }}

    # TODO: handle "inactive" (deleted) services
    - name: Describe ECS service
      id: describe-services
      run: |
        echo "::set-output name=count::$(aws ecs describe-services --cluster superset-ci --services PR-${{ github.event.issue.number }}-service | jq '.services | length')"

    - name: Create ECS service
      if: steps.describe-services.outputs.count == '0'
      id: create-service
      env:
        ECR_SUBNETS: subnet-0e15a5034b4121710,subnet-0e8efef4a72224974
        ECR_SECURITY_GROUP: sg-092ff3a6ae0574d91
      run: |
        aws ecs create-service \
        --cluster superset-ci \
        --service-name PR-${{ github.event.issue.number }}-service \
        --task-definition superset-ci \
        --launch-type FARGATE \
        --desired-count 0 \
        --platform-version LATEST \
        --network-configuration "awsvpcConfiguration={subnets=[$ECR_SUBNETS],securityGroups=[$ECR_SECURITY_GROUP],assignPublicIp=ENABLED}" \
        --tags key=pr,value=${{ github.event.issue.number }} key=sha,value=${{ fromJSON(steps.get-pr.outputs.result).merge_commit_sha }} key=github_user,value=${{ github.actor }}

    - name: Deploy Amazon ECS task definition
      id: deploy-task
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: PR-${{ github.event.issue.number }}-service
        cluster: superset-ci
        wait-for-service-stability: true
        wait-for-minutes: 10

    - name: Update ECS service task count
      run: |
        aws ecs update-service --cluster superset-ci --service PR-${{ github.event.issue.number }}-service --desired-count 1

    - name: List tasks
      id: list-tasks
      run: |
        echo "::set-output name=task::$(aws ecs list-tasks --cluster superset-ci --service-name PR-${{ github.event.issue.number }}-service | jq '.taskArns | first')"

    - name: Get network interface
      id: get-eni
      run: |
        echo "::set-output name=eni::$(aws ecs describe-tasks --cluster superset-ci --tasks ${{ steps.list-tasks.outputs.task }} | jq '.tasks | .[0] | .attachments | .[0] | .details | map(select(.name=="networkInterfaceId")) | .[0] | .value')"

    - name: Get public IP
      id: get-ip
      run: |
        echo "::set-output name=ip::$(aws ec2 describe-network-interfaces --network-interface-ids ${{ steps.get-eni.outputs.eni }} | jq -r '.NetworkInterfaces | first | .Association.PublicIp')"

    - name: Comment (success)
      if: ${{ success() }}
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          github.issues.createComment({
            issue_number: ${{ github.event.issue.number }},
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Ephemeral environment spinning up at http://${{ steps.get-ip.outputs.ip }}:8080. Please allow several minutes for startup.'
          })

    - name: Comment (failure)
      if: ${{ failure() }}
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          github.issues.createComment({
            issue_number: ${{ github.event.issue.number }},
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Ephemeral environment creation failed. Please check the Actions logs for details.'
          })
